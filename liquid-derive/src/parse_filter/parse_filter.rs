use super::*;

/// Generates implementation of `ParseFilter`.
fn generate_parse_filter(filter_parser: &ParseFilter) -> TokenStream {
    let ParseFilter {
        name: parser_name,
        meta:
            ParseFilterMeta {
                parameters_struct_name,
                filter_struct_name,
                ..
            },
        ..
    } = filter_parser;

    let impl_parse_filter = filter_parser.generate_impl(quote! { ::liquid::compiler::ParseFilter });

    if let Some(parameters_struct_name) = parameters_struct_name {
        quote! {
            #impl_parse_filter {
                fn parse(&self, args: ::liquid::compiler::FilterArguments) -> Result<Box<::liquid::compiler::Filter>> {
                    let args = <#parameters_struct_name as ::liquid::compiler::FilterParameters>::from_args(args)?;

                    Ok(Box::new(<#filter_struct_name as From<#parameters_struct_name>>::from(args)))
                }
            }
        }
    } else {
        quote! {
            #impl_parse_filter {
                fn parse(&self, mut args: ::liquid::compiler::FilterArguments) -> Result<Box<::liquid::compiler::Filter>> {
                    if let Some(arg) = args.positional.next() {
                        return Err(::liquid::error::Error::with_msg("Too many positional parameters."));
                    }
                    if let Some(arg) = args.keyword.next() {
                        return Err(::liquid::error::Error::with_msg(format!("Unexpected keyword parameter `{}`.", arg.0)));
                    }


                    Ok(Box::new(<#filter_struct_name as Default>::default()))
                }
            }
        }
    }
}

pub fn derive(input: &DeriveInput) -> TokenStream {
    let filter_parser = match ParseFilter::from_input(input) {
        Ok(filter_parser) => filter_parser,
        Err(err) => return err.to_compile_error(),
    };

    let mut output = generate_parse_filter(&filter_parser);

    // Temporary TODO remove
    // This println! shows the code that was generated by this macro when compiling
    println!("--------------------\n{}\n------------\n\n", output);

    output
}
